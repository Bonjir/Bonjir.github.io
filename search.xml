<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/06/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>python实现自动登入校园网</title>
    <url>/2023/06/12/python%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E5%85%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/</url>
    <content><![CDATA[<p>最近在做一个项目，其中就需要自动联网的功能。不过由于不可能把手机一直留在宿舍开热点，就只能连接wifi了。学校里有ustcnet（校园网）和eduroam两种wifi，其中前者是连接后通过浏览器上登录账号并开通网络后才可以使用的，而eduroam是通过用户名和密码来进行连接的（应用IEEE 802.1x协议进行接入，基于RADIUS协议进行接入认证，具体笔者也不清楚），和普通的使用ssid和密码接入wifi的过程有着天壤之别，所以笔者选择了连接校园网来实现所需功能。  </p>
<p>前文提到了登录校园网需要通过浏览器进行操作，其实本质上就是和服务器端进行http协议通信，发送用户名和密码让服务端给你的IP提供一个access，这样就可以访问网络了。  </p>
<p>在参考了多篇前辈编写的校园网自动登录脚本后[1],[2],[3]，其实现方法大致可以总结如下:  </p>
<ol>
<li>利用selenium模块中的webdriver类模拟一个浏览器，然后在浏览器中模拟点击，以通过网页原生的方式向服务端发送连接请求</li>
<li>通过抓包获取网页向服务端发送的连接请求数据格式，并利用requests模块向服务端发送连接请求</li>
</ol>
<h2 id="一、webdriver方式"><a href="#一、webdriver方式" class="headerlink" title="一、webdriver方式"></a>一、webdriver方式</h2><p>这种方法主要摘自[1]，并没有太多的改动，原文的讲解很详细，推荐去看原作者。下面给出实现代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spider</span>():</span><br><span class="line">   driver = webdriver.Chrome()</span><br><span class="line">   driver.get(<span class="string">&#x27;http://wlt.ustc.edu.cn&#x27;</span>)   <span class="comment">#这里输入你的校园网登录网址</span></span><br><span class="line">   time.sleep(<span class="number">1</span>)</span><br><span class="line">   input_tag = driver.find_element(By.XPATH, <span class="string">&quot;//input[@name=&#x27;name&#x27; and @class=&#x27;sform&#x27;]&quot;</span>)   <span class="comment">#通过xpath确定账号框位置</span></span><br><span class="line">   input_tag.send_keys(<span class="string">&quot;your_account&quot;</span>)  <span class="comment">#输入账号</span></span><br><span class="line">   input_tag2 = driver.find_element(By.XPATH, <span class="string">&quot;//input[@name=&#x27;password&#x27; and @class=&#x27;sform&#x27;]&quot;</span>)  <span class="comment">#通过xpath确定密码框位置</span></span><br><span class="line">   input_tag2.send_keys(<span class="string">&quot;your_password&quot;</span>)  <span class="comment">#输入密码</span></span><br><span class="line">   input_tag2.send_keys(Keys.ENTER)    <span class="comment">#敲一下回车</span></span><br><span class="line">   time.sleep(<span class="number">1</span>) </span><br><span class="line">   input_tag3 = driver.find_element(By.XPATH, <span class="string">&quot;//input[@name=&#x27;go&#x27; and @type=&#x27;submit&#x27;]&quot;</span>)  <span class="comment">#找到开通网络按钮</span></span><br><span class="line">   input_tag3.send_keys(Keys.ENTER)    <span class="comment">#敲一下回车</span></span><br><span class="line">   time.sleep(<span class="number">1</span>)  <span class="comment"># 1秒后自动关闭浏览器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试网络是否连通</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Ping</span>():</span><br><span class="line">   backinfo = subprocess.call(<span class="string">&#x27;ping www.zhihu.com -n 1&#x27;</span>, shell=<span class="literal">True</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">   <span class="keyword">if</span> backinfo:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;网络未连接&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;有网&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">2</span>     </span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   spider()</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;连接网络中·····&quot;</span>)</span><br><span class="line">   connection = Ping() </span><br><span class="line">   <span class="keyword">if</span> connection == <span class="number">2</span> :</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;ping&quot;</span>)</span><br><span class="line">   <span class="keyword">elif</span> connection == <span class="number">1</span>:</span><br><span class="line">      spider()</span><br><span class="line">   exit()</span><br></pre></td></tr></table></figure>

<p>对此方法中的值得注意的点进行以下总结：</p>
<ol>
<li>原文中利用的是<code>driver.find_element_by_xpath()</code> 函数，这种方法已经被弃用，此处使用<code>driver.find_element(By.XPATH, &quot;xpath_str&quot;)</code>进行xpath寻找。</li>
<li>具体用xpath匹配什么需要依不同的校园网而定，一般有交互的控件都带有input的标签，所以f12打开元素审查，搜索’input’或者搜索控件的内容就可以找到控件的name、class、style等信息，再利用这些信息进行xpath匹配即可。</li>
<li>不要ping校内网站，即使没有登录校园网，也是可以浏览校内网站的。</li>
</ol>
<h2 id="二、requests方式"><a href="#二、requests方式" class="headerlink" title="二、requests方式"></a>二、requests方式</h2><p>校内网登录的方式一般有GET和POST两种方式[3]，使用GET方式只需要把账号密码放在url的参数中即可，此处不赘言，而POST方式更为常见，此处主要讨论这种方法。  </p>
<p>这种方法主要通过抓包获取网页向服务端发送的数据格式，然后再利用requests发送http包。</p>
<h3 id="1-抓包"><a href="#1-抓包" class="headerlink" title="1. 抓包"></a>1. 抓包</h3><p>打开浏览器无痕模式（这点很重要，不然你会发现你发送的第一个包就有cookie），在浏览器中打开校园网网站，f12打开开发者工具，点击上方的network  </p>
<p><img src="/2023/06/12/python%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E5%85%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/pic_developertool.png" alt="开发者工具"></p>
<p>然后再输入你的账号和密码之后，点击登录，留意刚刚抓到的包，点击它查看具体数据。</p>
<h3 id="2-登录账户"><a href="#2-登录账户" class="headerlink" title="2. 登录账户"></a>2. 登录账户</h3><p><img src="/2023/06/12/python%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E5%85%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/request_headers.png" alt="请求头"></p>
<p>把上面红框内的部分复制下来，把冒号前面和冒号后面分别用引号圈起来。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">post_header = &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="built_in">str</span>(<span class="built_in">len</span>(urlencode(post_data))),</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在构建好request_header字典之后，注意到其中有一项content-length，这项就是表单的长度。在request_header的下面可以发现form_data（也可能是其他形式的请求数据，因不同校园网而定），把这部分也复制下来制成字典。  </p>
<p><img src="/2023/06/12/python%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E5%85%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/login_formdata.png" alt="登入表单"></p>
<p>不过需要注意的是，这里面有一部分不可以直接复制，就是<code>go:(unable to decode value)</code>这项，需要点击view URL encoded，把对应位置的URL编码字符串转换成GBK编码，即可放入请求数据的字典中去。具体的转换方式是把 ‘+’ 改成 ‘ ’ ,  ‘%’ 去掉，剩余部分是GBK编码的汉字，利用<a href="https://www.23bei.com/tool/54.html">编码转换网站</a> 将GBK编码转换成汉字，然后再encode(“GBK”)即可。</p>
<p><img src="/2023/06/12/python%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E5%85%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/login_unable_to_decode.png" alt="无法解析"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">go_login = <span class="string">&quot;登录账户&quot;</span></span><br><span class="line">post_data = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;go&quot;</span>: go_login.encode(<span class="string">&quot;GBK&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在浏览器开发工具的general部分找到requested URL，将此url设为<code>post_addr</code>，在利用<code>rq = requests.post(post_addr, headers=post_header, data=post_data)</code>即可发送数据。注意此处有必要把request的返回值记录下来，因为response包里有cookie，进行后续的操作需要用到。  </p>
<h3 id="3-开通网络"><a href="#3-开通网络" class="headerlink" title="3. 开通网络"></a>3. 开通网络</h3><p>有些校园网可能登陆之后就自动连接了网络，不过笔者的校园网需要再额外多一个开通网络的步骤。  </p>
<p>点击开通网络，抓包发现这个数据包是GET类型，继续像之前把数据复制下来做成字典。可以看到这里的请求数据包里有一项cookie，值为上面登录账户过程中response里的set-cookie值。</p>
<p><img src="/2023/06/12/python%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E5%85%A5%E6%A0%A1%E5%9B%AD%E7%BD%91/submit_data.png" alt="开通网络数据包"></p>
<p>下面给出完整实现代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_host_ip</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">        s.connect((<span class="string">&quot;10.255.255.255&quot;</span>, <span class="number">1</span>))</span><br><span class="line">        ip = s.getsockname()[<span class="number">0</span>]    </span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        s.close() </span><br><span class="line">    <span class="keyword">return</span> ip</span><br><span class="line"></span><br><span class="line">user_ip = get_host_ip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;局域网ip为&#123;&#125;&quot;</span>.<span class="built_in">format</span>(user_ip))</span><br><span class="line"></span><br><span class="line">user_name = <span class="string">&quot;your_account&quot;</span></span><br><span class="line">user_password = <span class="string">&quot;your_password&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LogIn</span>():</span><br><span class="line">    post_addr = <span class="string">&quot;http://202.38.64.59/cgi-bin/ip&quot;</span></span><br><span class="line">    go_login = <span class="string">&quot;登录账户&quot;</span></span><br><span class="line">    post_data = &#123;</span><br><span class="line">        <span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;URL&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ip&quot;</span>: user_ip,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: user_name,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: user_password,</span><br><span class="line">        <span class="string">&quot;go&quot;</span>: go_login.encode(<span class="string">&quot;GBK&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    post_header = &#123;</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;max-age=0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Length&quot;</span>: <span class="built_in">str</span>(<span class="built_in">len</span>(urlencode(post_data))),</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;name=; password=&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;202.38.64.59&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://202.38.64.59&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://202.38.64.59/cgi-bin/ip&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    rq = requests.post(post_addr, headers=post_header, data=post_data)</span><br><span class="line">    cookie_rn = rq.headers[<span class="string">&quot;Set-Cookie&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> rq.status_code, cookie_rn</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Connect</span>(<span class="params">cookie_rn</span>):</span><br><span class="line">    connect_url = <span class="string">r&quot;http://202.38.64.59/cgi-bin/ip?cmd=set&amp;url=URL&amp;type=8&amp;exp=0&amp;go=+%BF%AA%CD%A8%CD%F8%C2%E7+&quot;</span></span><br><span class="line">    connect_headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;name=; password=; &#123;rn&#125;&#x27;</span>.<span class="built_in">format</span>(rn = cookie_rn),</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;202.38.64.59&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://202.38.64.59/cgi-bin/ip&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    go_submit = <span class="string">&quot; 开通网络 &quot;</span></span><br><span class="line">    query_string_params = &#123;</span><br><span class="line">        <span class="string">&#x27;cmd&#x27;</span>: <span class="string">&#x27;set&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;URL&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;exp&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;go&quot;</span>: go_submit.encode(<span class="string">&quot;GBK&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    rq = requests.get(connect_url, headers=connect_headers, data=query_string_params)</span><br><span class="line">    <span class="keyword">return</span> rq.status_code</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Ping</span>():</span><br><span class="line">   backinfo = subprocess.call(<span class="string">&quot;ping www.bilibili.com -n 1&quot;</span>, shell=<span class="literal">True</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">   <span class="keyword">if</span> backinfo:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;网络未连接&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;网络已连接&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    Ping()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;连接网络中·····&quot;</span>)</span><br><span class="line"></span><br><span class="line">    status_code, cookie_rn = LogIn()</span><br><span class="line">    <span class="keyword">if</span> status_code != <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;LogIn Error with status code: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(status_code))</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;LogIn Success: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(status_code))</span><br><span class="line"></span><br><span class="line">    status_code = Connect(cookie_rn)</span><br><span class="line">    <span class="keyword">if</span> status_code != <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connect Error with status code: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(status_code))</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connect Success: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(status_code))</span><br><span class="line"></span><br><span class="line">    Ping()</span><br><span class="line"></span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure>

<p>笔者踩的一个比较大的坑就是每次发送GET&#x2F;POST包的远端地址不要搞错了，需要是抓包获得的request URL，如果这个搞错了很可能会返回错误码405。  </p>
<p>这样基本就完成了python自动登入校园网的实现。总结一下，第一种方式是利用webdriver类模拟浏览器进行爬虫操作，优点是实现简单，调试直观，代码简短，不过缺点是速度慢、不好把控（如果sleep时间少了会导致服务器没加载完），而且外观比较丑陋、不能静默实现爬虫；第二种方式是利用requests发送http包进行爬虫操作，优点是速度快、可以后台进行、<del>让笔者了解了更多HTTP和网络知识</del>、同时因为不用模拟浏览器，也就不局限于操作系统，http包的发送可以在单片机上进行，缺点是调试困难没有头绪，代码繁杂，<del>堪称BUG妙妙屋</del>。  </p>
<p>以上就是此次项目的实现以及讲解，希望能给各位读者带来帮助~</p>
<p>主要参考：</p>
<p>[1] <a href="https://zhuanlan.zhihu.com/p/367942686?utm_id=0">基于python的校园网自动登录脚本！<em>zhihu.com</em>@Python小萌新</a></p>
<p>[2] <a href="https://blog.csdn.net/m0_72091242/article/details/125843564">python写一个脚本，自动连wifi，自动登录校园网_csdn.net@今天代码没bug</a></p>
<p>[3] <a href="https://zhuanlan.zhihu.com/p/370801224">自动登录校园网脚本(Python实现)_zhihu.com@Cosmica</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>网络</tag>
        <tag>http</tag>
      </tags>
  </entry>
</search>
